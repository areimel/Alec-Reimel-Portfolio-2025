---
const themes = [
  { 
    id: 'green', 
    name: 'Vintage Green', 
    class: 'theme-green',
    preview: 'bg-[#40FF40]'
  },
  { 
    id: 'amber', 
    name: 'Cozy Amber', 
    class: 'theme-amber',
    preview: 'bg-[#FFA028]'
  },
  {
    id: 'cyber',
    name: 'Hacker Red',
    class: 'theme-cyber',
    preview: 'bg-[#FF003C]'
  },
  {
    id: 'cyber-yellow',
    name: 'Industrial Yellow',
    class: 'theme-cyber-yellow',
    preview: 'bg-[#FFE600]'
  },
  {
    id: 'severance',
    name: 'Severance Blue',
    class: 'theme-severance',
    preview: 'bg-[#8CF0FF]'
  }
];

export interface Props {
  isDropdown?: boolean;
}

const { isDropdown = false } = Astro.props;
---

{isDropdown ? (
  <div class="bg-terminal-bg-secondary p-2 rounded-lg border border-terminal-500 w-48 shadow-lg">
    <div class="flex flex-col gap-1">
      {themes.map(theme => (
        <button
          class="theme-button px-2 py-1 rounded text-xs transition-colors flex items-center gap-2"
          data-theme={theme.id}
        >
          <span class={`w-3 h-3 rounded-full ${theme.preview}`}></span>
          {theme.name}
        </button>
      ))}
    </div>
  </div>
) : (
  <div class="">
    <div class="bg-terminal-bg-secondary p-2 rounded-lg border border-terminal-500">
      <div class="flex flex-col gap-2">
        {themes.map(theme => (
          <button
            class="theme-button px-4 py-2 rounded text-xs transition-colors flex items-center gap-2"
            data-theme={theme.id}
          >
            <span class={`w-4 h-4 rounded-full ${theme.preview}`}></span>
            {theme.name}
          </button>
        ))}
      </div>
    </div>
  </div>
)}

<script>
  // This script now only handles theme switching, not initial application
  // (initial application is handled in ApplyColorMode.astro)
  const buttons = document.querySelectorAll('.theme-button');
  
  // Get theme from localStorage or default to green
  const currentTheme = localStorage.getItem('theme') || 'green';
  
  // Set initial active state based on current theme
  buttons.forEach(button => {
    const theme = button.getAttribute('data-theme') || 'green';
    
    // Set initial active state
    if (theme === currentTheme) {
      button.classList.add('active');
    }
    
    button.addEventListener('click', () => {
      // Remove old theme and active states
      buttons.forEach(btn => btn.classList.remove('active'));
      
      // Remove all possible theme classes
      document.documentElement.classList.remove(
        'theme-green', 'theme-amber', 'theme-cyber', 'theme-cyber-yellow', 'theme-severance'
      );
      
      // Add new theme
      document.documentElement.classList.add(`theme-${theme}`);
      button.classList.add('active');
      
      // Save preference
      localStorage.setItem('theme', theme);
    });
  });
</script>

<style>
  .theme-button {
    @apply bg-terminal-bg-primary text-terminal-700 hover:bg-terminal-bg-accent;
  }
  
  .theme-button.active {
    @apply bg-terminal-bg-accent text-terminal-bright;
  }
</style> 